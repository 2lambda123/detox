"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1222],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),h=r,m=d["".concat(s,".").concat(h)]||d[h]||u[h]||a;return n?i.createElement(m,l(l({ref:t},c),{},{components:n})):i.createElement(m,l({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<a;p++)l[p]=n[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6961:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var i=n(7462),r=(n(7294),n(3905));const a={},l="Internals API",o={unversionedId:"api/internals",id:"api/internals",title:"Internals API",description:"This section might be more volatile than the other ones, yet we'll do our",source:"@site/../docs/api/internals.md",sourceDirName:"api",slug:"/api/internals",permalink:"/Detox/docs/next/api/internals",draft:!1,editUrl:"https://github.com/wix/Detox/edit/master/docs/../docs/api/internals.md",tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"Logger",permalink:"/Detox/docs/next/api/logger"},next:{title:"Design Principles",permalink:"/Detox/docs/next/articles/design-principles"}},s={},p=[{value:"Main lifecycle",id:"main-lifecycle",level:2},{value:"<code>resolveConfig</code>",id:"resolveconfig",level:3},{value:"<code>getStatus</code>",id:"getstatus",level:3},{value:"<code>init</code>",id:"init",level:3},{value:"<code>cleanup</code>",id:"cleanup",level:3},{value:"<code>installWorker</code>",id:"installworker",level:3},{value:"<code>uninstallWorker</code>",id:"uninstallworker",level:3},{value:"Optional lifecycle",id:"optional-lifecycle",level:2},{value:"Synchronizing with artifacts manager",id:"synchronizing-with-artifacts-manager",level:3},{value:"Reporting test results",id:"reporting-test-results",level:3},{value:"Properties",id:"properties",level:2},{value:"config",id:"config",level:3},{value:"session",id:"session",level:3},{value:"log",id:"log",level:3},{value:"<code>tracing</code>",id:"tracing",level:3},{value:"worker",id:"worker",level:3}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"internals-api"},"Internals API"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"This section might be more volatile than the other ones, yet we'll do our\nbest to adhere to Semantic Release standards even here.")),(0,r.kt)("p",null,"Detox Internals might be useful for developing advanced enterprise presets\nor if you are planning to integrate with a third-party test runner like\n",(0,r.kt)("a",{parentName:"p",href:"https://mochajs.org"},"Mocha"),", ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/avajs/ava"},"Ava"),", ",(0,r.kt)("a",{parentName:"p",href:"https://vitest.dev"},"Vitest")," or other ones."),(0,r.kt)("h2",{id:"main-lifecycle"},"Main lifecycle"),(0,r.kt)("h3",{id:"resolveconfig"},(0,r.kt)("inlineCode",{parentName:"h3"},"resolveConfig")),(0,r.kt)("p",null,"Use with a caution, when you still have no config, yet need to avoid ","[","internals.init()]","[","#init] call."),(0,r.kt)("p",null,"You normally don\u2019t need it if you use Detox CLI (",(0,r.kt)("inlineCode",{parentName:"p"},"detox test \u2026"),"), but if you want to start tests\ndirectly and you need to have the config resolved before ","[","internals.init()]","[","#init] is called, this\nis the way to go."),(0,r.kt)("h3",{id:"getstatus"},(0,r.kt)("inlineCode",{parentName:"h3"},"getStatus")),(0,r.kt)("p",null,"Returns a string (",(0,r.kt)("inlineCode",{parentName:"p"},"inactive"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"init"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"active")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"cleanup"),") depending on what\u2019s going on."),(0,r.kt)("h3",{id:"init"},(0,r.kt)("inlineCode",{parentName:"h3"},"init")),(0,r.kt)("p",null,"This is the phase where Detox reads its configuration, starts a server."),(0,r.kt)("h3",{id:"cleanup"},(0,r.kt)("inlineCode",{parentName:"h3"},"cleanup")),(0,r.kt)("p",null,"The global cleanup phase should happen after all the tests have finished.\nThis is the phase where the Detox server shuts down."),(0,r.kt)("h3",{id:"installworker"},(0,r.kt)("inlineCode",{parentName:"h3"},"installWorker")),(0,r.kt)("p",null,"This is the phase where Detox loads its expectation library and starts a device."),(0,r.kt)("h3",{id:"uninstallworker"},(0,r.kt)("inlineCode",{parentName:"h3"},"uninstallWorker")),(0,r.kt)("p",null,"Deallocates the device."),(0,r.kt)("h2",{id:"optional-lifecycle"},"Optional lifecycle"),(0,r.kt)("h3",{id:"synchronizing-with-artifacts-manager"},"Synchronizing with artifacts manager"),(0,r.kt)("p",null,"The naming you can see adheres much to Jest Circus workflow:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onRunStart")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onRunDescribeStart")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onTestStart")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onHookStart")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onHookFailure")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onHookSuccess")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onTestFnStart")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onTestFnFailure")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onTestFnSuccess")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onTestDone")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onRunDescribeFinish")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onRunFinish"))),(0,r.kt)("h3",{id:"reporting-test-results"},"Reporting test results"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"reportTestResults")," reports to Detox CLI about failed tests that could\nhave been re-run if ",(0,r.kt)("inlineCode",{parentName:"p"},"--retries")," is set to a non-zero."),(0,r.kt)("p",null,"It takes one argument, an array of test file reports. Each report is an object with the following properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"testFilePath")," (string) \u2014 global or relative path to the failed test file;"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"success")," (boolean) \u2014 whether the test passed or not;"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"testExecError")," (optional error) \u2014 top-level error if the entire test file failed;"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"isPermanentFailure")," (optional boolean) \u2014 if the test failed, it should tell whether the failure is permanent. Permanent failure means that the test file should not be re-run.")),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("h3",{id:"config"},"config"),(0,r.kt)("h3",{id:"session"},"session"),(0,r.kt)("h3",{id:"log"},"log"),(0,r.kt)("h3",{id:"tracing"},(0,r.kt)("inlineCode",{parentName:"h3"},"tracing")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"tracing.createEventStream()")," \u2013 creates a readable stream of the currently recorded events in\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.google.com/document/d/1CvAClvFfyA5R-PhYUmn5OOQtYMH4h6I0nSsKchNAySU"},"Chrome Trace Event format"),"."),(0,r.kt)("p",null,"See also: ",(0,r.kt)("a",{parentName:"p",href:"https://wix-incubator.github.io/trace-event-lib/interfaces/DurationBeginEvent.html"},(0,r.kt)("inlineCode",{parentName:"a"},"DurationBeginEvent")),", ",(0,r.kt)("a",{parentName:"p",href:"https://wix-incubator.github.io/trace-event-lib/interfaces/DurationEndEvent.html"},(0,r.kt)("inlineCode",{parentName:"a"},"DurationEndEvent")),", ",(0,r.kt)("a",{parentName:"p",href:"https://wix-incubator.github.io/trace-event-lib/interfaces/InstantEvent.html"},(0,r.kt)("inlineCode",{parentName:"a"},"InstantEvent")),"."),(0,r.kt)("h3",{id:"worker"},"worker"),(0,r.kt)("p",null,"Not documented on purpose. Provides the direct access to the object which\nholds the device driver, websocket client, matchers, expectations, etc."))}u.isMDXComponent=!0}}]);
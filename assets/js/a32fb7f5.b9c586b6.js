"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4296],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=o,h=d["".concat(l,".").concat(m)]||d[m]||c[m]||i;return n?a.createElement(h,r(r({ref:t},p),{},{components:n})):a.createElement(h,r({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var u=2;u<i;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(7294),o=n(6010);const i="tabItem_Ymn6";function r(e){let{children:t,hidden:n,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(i,r),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(7462),o=n(7294),i=n(6010),r=n(2389),s=n(7392),l=n(7094),u=n(2466);const p="tabList__CuJ",c="tabItem_LNqP";function d(e){const{lazy:t,block:n,defaultValue:r,values:d,groupId:m,className:h}=e,y=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=d??y.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),b=(0,s.l)(g,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===r?r:r??y.find((e=>e.props.default))?.props.value??y[0].props.value;if(null!==f&&!g.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:v}=(0,l.U)(),[N,I]=(0,o.useState)(f),x=[],{blockElementScrollPositionUntilNextRender:w}=(0,u.o5)();if(null!=m){const e=k[m];null!=e&&e!==N&&g.some((t=>t.value===e))&&I(e)}const C=e=>{const t=e.currentTarget,n=x.indexOf(t),a=g[n].value;a!==N&&(w(t),I(a),null!=m&&v(m,String(a)))},D=e=>{let t=null;switch(e.key){case"Enter":C(e);break;case"ArrowRight":{const n=x.indexOf(e.currentTarget)+1;t=x[n]??x[0];break}case"ArrowLeft":{const n=x.indexOf(e.currentTarget)-1;t=x[n]??x[x.length-1];break}}t?.focus()};return o.createElement("div",{className:(0,i.Z)("tabs-container",p)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},h)},g.map((e=>{let{value:t,label:n,attributes:r}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>x.push(e),onKeyDown:D,onClick:C},r,{className:(0,i.Z)("tabs__item",c,r?.className,{"tabs__item--active":N===t})}),n??t)}))),t?(0,o.cloneElement)(y.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},y.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function m(e){const t=(0,r.Z)();return o.createElement(d,(0,a.Z)({key:String(t)},e))}},8585:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>d,default:()=>b,frontMatter:()=>c,metadata:()=>m,toc:()=>y});var a=n(7462),o=(n(7294),n(3905)),i=n(5488),r=n(5162);const s={toc:[]};function l(e){let{components:t,...i}=e;return(0,o.kt)("wrapper",(0,a.Z)({},s,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Make sure that React Native packager is already running. If not, you can start it with:",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npx react-native start\n"))),(0,o.kt)("li",{parentName:"ol"},"Launch Android Studio."),(0,o.kt)("li",{parentName:"ol"},"Open ",(0,o.kt)("inlineCode",{parentName:"li"},"Tools > Layout Inspector")," tool:\n",(0,o.kt)("img",{alt:"tag attribute with testID value",src:n(8584).Z,width:"3012",height:"678"})),(0,o.kt)("li",{parentName:"ol"},"Build your application from Android Studio."),(0,o.kt)("li",{parentName:"ol"},"After you run your app from Android Studio, the ",(0,o.kt)("inlineCode",{parentName:"li"},"Layout Inspector")," should automatically attach to the process and show the hierarchy of your screen. You will see the snapshot of your screen, where you can focus on any component with a click.",(0,o.kt)("admonition",{parentName:"li",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"If ",(0,o.kt)("inlineCode",{parentName:"p"},"Layout Inspector")," doesn't attach to process from Android Studio, or you build it in a different way \u2013 you can attach to your app process manually using ",(0,o.kt)("inlineCode",{parentName:"p"},"Select Process")," dropdown."))),(0,o.kt)("li",{parentName:"ol"},"Select the component you need, and you will see your actual testID value under the ",(0,o.kt)("inlineCode",{parentName:"li"},"tag")," attribute.\n",(0,o.kt)("img",{alt:"tag attribute with testID value",src:n(3022).Z,width:"1500",height:"1156"}))))}l.isMDXComponent=!0;const u={toc:[]};function p(e){let{components:t,...i}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Build and start your app in ",(0,o.kt)("em",{parentName:"li"},"debug")," mode as you usually do, e.g.:",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"detox build -c ios.sim.debug\nnpx react-native start\nnpx react-native run-ios\n"))),(0,o.kt)("li",{parentName:"ol"},"Open your iOS project in Xcode, e.g. ",(0,o.kt)("inlineCode",{parentName:"li"},"YourProject/ios/YourProject.xcworkspace"),"."),(0,o.kt)("li",{parentName:"ol"},"Go to ",(0,o.kt)("inlineCode",{parentName:"li"},"Debug > Attach to Process")," and select your app process (it is usually on top of the list).\n",(0,o.kt)("img",{alt:"attach to debug process ios",src:n(6645).Z,width:"2538",height:"1254"}),"\nYou will see a new device started with your app."),(0,o.kt)("li",{parentName:"ol"},"Open the ",(0,o.kt)("inlineCode",{parentName:"li"},"AppDelegate")," file:\n",(0,o.kt)("img",{alt:"AppDelegate file",src:n(3389).Z,width:"2580",height:"1166"})),(0,o.kt)("li",{parentName:"ol"},"Click ",(0,o.kt)("inlineCode",{parentName:"li"},"Debug View Hierarchy")," button on the bottom panel:\n",(0,o.kt)("img",{alt:"Debug Hierarchy button",src:n(4523).Z,width:"2580",height:"1818"})),(0,o.kt)("li",{parentName:"ol"},"Select the component you need, and you will see your actual ",(0,o.kt)("inlineCode",{parentName:"li"},"testID")," value under the ",(0,o.kt)("inlineCode",{parentName:"li"},"Accessibility > Identifier")," attribute.\n",(0,o.kt)("img",{alt:"accessibility attribute with testID value",src:n(2161).Z,width:"1325",height:"1149"}))))}p.isMDXComponent=!0;const c={},d="Adding testID to your components",m={unversionedId:"guide/test-id",id:"guide/test-id",title:"Adding testID to your components",description:"This guide is applicable only for React Native applications.",source:"@site/../docs/guide/test-id.mdx",sourceDirName:"guide",slug:"/guide/test-id",permalink:"/Detox/docs/next/guide/test-id",draft:!1,editUrl:"https://github.com/wix/Detox/edit/master/docs/../docs/guide/test-id.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Investigating Failures",permalink:"/Detox/docs/next/guide/investigating-test-failure"},next:{title:"Parallel Test Execution",permalink:"/Detox/docs/next/guide/parallel-test-execution"}},h={},y=[{value:"Pass testID to your native components",id:"pass-testid-to-your-native-components",level:2},{value:"Child elements",id:"child-elements",level:3},{value:"Repetitive components",id:"repetitive-components",level:3},{value:"Find your testID",id:"find-your-testid",level:2}],g={toc:y};function b(e){let{components:t,...s}=e;return(0,o.kt)("wrapper",(0,a.Z)({},g,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"adding-testid-to-your-components"},"Adding testID to your components"),(0,o.kt)("admonition",{title:"Note",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"This guide is applicable only for React Native applications.")),(0,o.kt)("p",null,"It is always the best idea to match your element by something unique. We recommend using ",(0,o.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/view#testid"},(0,o.kt)("inlineCode",{parentName:"a"},"testID")," property")," supported by most React Native components:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'<View>\n  <TouchableOpacity testID="MyUniqueId123">\n    <Text>Some text</Text>\n  </TouchableOpacity>\n</View>\n')),(0,o.kt)("h2",{id:"pass-testid-to-your-native-components"},"Pass testID to your native components"),(0,o.kt)("p",null,"Passing a ",(0,o.kt)("inlineCode",{parentName:"p"},"testID")," to your custom component props has no effect until you forward it down to a native component like ",(0,o.kt)("inlineCode",{parentName:"p"},"<View />")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"<TouchableOpacity />"),"\nthat implements rendering it as an accessibility identifier in the native component hierarchy:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Pass testID to native component",src:n(301).Z,width:"2116",height:"358"})),(0,o.kt)("p",null,"For example, you have ",(0,o.kt)("inlineCode",{parentName:"p"},"<YourCustomComponent />")," and you pass a ",(0,o.kt)("inlineCode",{parentName:"p"},"testID")," to it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="YourScreen.jsx"',title:'"YourScreen.jsx"'},'function YourScreen() {\n  return (\n    <YourCustomComponent testID="YourCustomComponent" />\n  );\n}\n')),(0,o.kt)("p",null,"Make sure that your implementation passes ",(0,o.kt)("inlineCode",{parentName:"p"},"testID")," to some React Native component that supports it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="YourCustomComponent.jsx"',title:'"YourCustomComponent.jsx"'},"function YourCustomComponent(props) {\n  return (\n// highlight-next-line\n    <View testID={props.testID}>\n      <Text>Some text</Text>\n    </View>\n  );\n}\n")),(0,o.kt)("h3",{id:"child-elements"},"Child elements"),(0,o.kt)("p",null,"If your component has several useful child elements, it is even a better idea to assign them some derived test IDs, e.g.:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="YourCustomComponent.jsx"',title:'"YourCustomComponent.jsx"'},"function YourCustomComponent(props) {\n  return (\n// highlight-next-line\n    <View testID={props.testID}>\n      <Text testID={`${props.testID}.label`}>Some text</Text>\n    </View>\n  );\n}\n")),(0,o.kt)("p",null,"That way, you could refer to specific elements in Detox tests via the most basic and least ambiguous ",(0,o.kt)("inlineCode",{parentName:"p"},"by.id")," matchers, e.g.:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"expect(element(by.id('YourCustomComponent'))).toBeVisible(); // the view is visible\nexpect(element(by.id('YourCustomComponent.label'))).toHaveText('Some text'); // the label has some text\n")),(0,o.kt)("h3",{id:"repetitive-components"},"Repetitive components"),(0,o.kt)("p",null,"It is highly not recommended to use non-unique ",(0,o.kt)("inlineCode",{parentName:"p"},"testID"),", e.g. when your components get rendered in any sort of repeater or virtualized list:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="YourScreen.jsx"',title:'"YourScreen.jsx"'},"const ITEMS = [\n  { title: 'First Item' },\n  { title: 'Second Item' },\n  { title: 'Third Item' },\n];\n\nfunction YourScreen() {\n  const renderItem = ({ item }) => (\n// highlight-next-line\n    <YourCustomComponent testID={'listItem'} lable={item.title} />\n  );\n\n  return (\n      <FlatList\n        data={ITEMS}\n        renderItem={renderItem}\n      />\n  );\n}\n")),(0,o.kt)("p",null,"This would be a violation of accessibility guidelines and unnecessary complication for your test matchers.\nYou\u2019d also have to use extra matchers and ",(0,o.kt)("inlineCode",{parentName:"p"},".atIndex")," clarification:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"expect(element(by.id('listItem')).atIndex(2)).toHaveText('Third Item');\n")),(0,o.kt)("p",null,"Instead, you could generate a unique ",(0,o.kt)("inlineCode",{parentName:"p"},"testID")," for every list item with the ",(0,o.kt)("inlineCode",{parentName:"p"},"index")," property:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"  const renderItem = ({ item, index }) => (\n    <YourCustomComponent testID={`listItem.${index + 1}`} lable={item.title} />\n  );\n")),(0,o.kt)("p",null,"That way, your assertion would become simpler and more deterministic:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"expect(element(by.id('listItem.3'))).toHaveText('Third Item');\n")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"testID for repetitive components",src:n(3288).Z,width:"2117",height:"624"})),(0,o.kt)("h2",{id:"find-your-testid"},"Find your testID"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Incorrect or absent ",(0,o.kt)("inlineCode",{parentName:"p"},"testID")," is a common cause for test failure.\nIf your test can't find your ",(0,o.kt)("inlineCode",{parentName:"p"},"testID")," and you can't see it either using tools described below, that usually means you haven't passed it down to this component.\nMake sure you keep forwarding it down until it reaches a native component.")),(0,o.kt)("p",null,"To make sure your ",(0,o.kt)("inlineCode",{parentName:"p"},"testID"),' is indeed rendered in your app, you can use such tools as "View Hierarchy" for iOS and "Layout Inspector" for Android.'),(0,o.kt)(i.Z,{groupId:"mobileOs",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"ios",label:"iOS",default:!0,mdxType:"TabItem"},(0,o.kt)(p,{mdxType:"IOS"})),(0,o.kt)(r.Z,{value:"android",label:"Android",mdxType:"TabItem"},(0,o.kt)(l,{mdxType:"Android"}))))}b.isMDXComponent=!0},8584:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/layoutInspector-52b277288c0d9468a30fa4ea8e1e90fb.png"},3022:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/tagAttributeAndroid-2c0ded43f52dee82ba0f4f928c90385d.png"},2161:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/accessibilityAttributeIOS-ce3eb8cb65b52a1841e30c7987a52d20.png"},3389:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/appDelegate-8012a1d99a62b1c3a264d859f6dc7cbd.png"},6645:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/attachToProcess-8a8987add83922ad72f51e8c5c72d0c1.png"},4523:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/debugHierarchyButton-502cd7061bac7ed49fda7323e4ec12ab.png"},301:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/passTestID-11f72c3a0d97eff6a62c5591ae0ea1da.png"},3288:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/repetitiveComponentTestID-6fffa71a68b1f2015a4e8b96ece1e0e3.png"}}]);